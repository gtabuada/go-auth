// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, password
) VALUES ($1, $2) RETURNING id, email
`

type CreateUserParams struct {
	Email    string `db:"email" json:"email" validate:"required,email"`
	Password string `db:"password" json:"password" validate:"required"`
}

type CreateUserRow struct {
	ID    uuid.UUID `db:"id" json:"id" validate:"uuid"`
	Email string    `db:"email" json:"email" validate:"required,email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
    id,
    email
FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID    uuid.UUID `db:"id" json:"id" validate:"uuid"`
	Email string    `db:"email" json:"email" validate:"required,email"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id,
    email
FROM
    users
`

type GetUsersRow struct {
	ID    uuid.UUID `db:"id" json:"id" validate:"uuid"`
	Email string    `db:"email" json:"email" validate:"required,email"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET email = $2 WHERE id = $1 RETURNING id, email
`

type UpdateUserParams struct {
	ID    uuid.UUID `db:"id" json:"id" validate:"uuid"`
	Email string    `db:"email" json:"email" validate:"required,email"`
}

type UpdateUserRow struct {
	ID    uuid.UUID `db:"id" json:"id" validate:"uuid"`
	Email string    `db:"email" json:"email" validate:"required,email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Email)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}
